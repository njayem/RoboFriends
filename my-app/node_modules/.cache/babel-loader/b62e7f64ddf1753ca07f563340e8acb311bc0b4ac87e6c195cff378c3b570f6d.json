{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/reactt/my-app/src/App.js\";\n// IMPORT ALL THE CHILDREN\nimport React, { Component } from \"react\";\nimport CardList from \"./CardList\";\n// We export variables like this:\nimport { robots } from \"./robots\";\nimport SearchBox from \"./SearchBox\";\nimport \"./App.css\";\n\n// We define props in the (App.js) file\n// Pass in the component CardList which is made up of Card components\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    // (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n    //.........................................................//\n    // Anytime you make your own method for a component ALWAYS DO:\n    // Use (this syntax) + (arrow functions) + (dismiss const)\n    // Changes the state of \"searchfiled\" to the value we write\n    //.........................................................//\n    this.onSearchChange = event => {\n      this.setState({\n        searchfield: event.target.value\n      });\n      console.log(event.target.value);\n    };\n    this.state = {\n      robots: robots,\n      searchfield: \"\"\n    };\n  }\n  // (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n  // This happens inside the render() function before return()\n  // Put that variable (filteredRobots) insid render() so we can access it\n  // The result (state change; robots change) is passed as a prop\n  //.........................................................//\n  render() {\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"f1\",\n        children: \"RoboFriends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: this.onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        robots: filteredRobots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","CardList","robots","SearchBox","jsxDEV","_jsxDEV","App","constructor","onSearchChange","event","setState","searchfield","target","value","console","log","state","render","filteredRobots","filter","robot","name","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","searchChange"],"sources":["/Users/nmufti/Desktop/reactt/my-app/src/App.js"],"sourcesContent":["// IMPORT ALL THE CHILDREN\nimport React, { Component } from \"react\";\nimport CardList from \"./CardList\";\n// We export variables like this:\nimport { robots } from \"./robots\";\nimport SearchBox from \"./SearchBox\";\nimport \"./App.css\";\n\n// We define props in the (App.js) file\n// Pass in the component CardList which is made up of Card components\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield: \"\",\n\t\t};\n\t}\n\n\t// (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n\t//.........................................................//\n\t// Anytime you make your own method for a component ALWAYS DO:\n\t// Use (this syntax) + (arrow functions) + (dismiss const)\n\t// Changes the state of \"searchfiled\" to the value we write\n\t//.........................................................//\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t\tconsole.log(event.target.value);\n\t};\n\n\t// (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n\t// This happens inside the render() function before return()\n\t// Put that variable (filteredRobots) insid render() so we can access it\n\t// The result (state change; robots change) is passed as a prop\n\t//.........................................................//\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter((robot) => {\n\t\t\treturn robot.name\n\t\t\t\t.toLowerCase()\n\t\t\t\t.includes(this.state.searchfield.toLowerCase());\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,YAAY;AACjC;AACA,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAO,WAAW;;AAElB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,SAASN,SAAS,CAAC;EAC3BO,WAAWA,CAAA,EAAG;IACb,KAAK,CAAC,CAAC;IAOR;IACA;IACA;IACA;IACA;IACA;IAAA,KACAC,cAAc,GAAIC,KAAK,IAAK;MAC3B,IAAI,CAACC,QAAQ,CAAC;QAAEC,WAAW,EAAEF,KAAK,CAACG,MAAM,CAACC;MAAM,CAAC,CAAC;MAClDC,OAAO,CAACC,GAAG,CAACN,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;IAChC,CAAC;IAfA,IAAI,CAACG,KAAK,GAAG;MACZd,MAAM,EAAEA,MAAM;MACdS,WAAW,EAAE;IACd,CAAC;EACF;EAaA;EACA;EACA;EACA;EACA;EAEAM,MAAMA,CAAA,EAAG;IACR,MAAMC,cAAc,GAAG,IAAI,CAACF,KAAK,CAACd,MAAM,CAACiB,MAAM,CAAEC,KAAK,IAAK;MAC1D,OAAOA,KAAK,CAACC,IAAI,CACfC,WAAW,CAAC,CAAC,CACbC,QAAQ,CAAC,IAAI,CAACP,KAAK,CAACL,WAAW,CAACW,WAAW,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;IACF,oBACCjB,OAAA;MAAKmB,SAAS,EAAC,IAAI;MAAAC,QAAA,gBAClBpB,OAAA;QAAImB,SAAS,EAAC,IAAI;QAAAC,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCxB,OAAA,CAACF,SAAS;QAAC2B,YAAY,EAAE,IAAI,CAACtB;MAAe;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChDxB,OAAA,CAACJ,QAAQ;QAACC,MAAM,EAAEgB;MAAe;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAER;AACD;AAEA,eAAevB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}