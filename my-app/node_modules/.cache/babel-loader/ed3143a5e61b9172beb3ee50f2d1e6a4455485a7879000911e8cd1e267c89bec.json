{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/REACT/RoboFriends/my-app/src/containers/App.js\";\n// IMPORT ALL THE CHILDREN\nimport React, { Component, useState, useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\n// We export variables like this:\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// We define props in the parent file\n// Example: Card props are defined in CardList\n// Pass in the component CardList which is made up of Card components\n// Card then destructures them in its function so we can use them!\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\n\n// App is a SMART component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    // (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n    //.........................................................//\n    // Anytime you make your own method for a component ALWAYS DO:\n    // Use (this syntax) + (arrow functions) + (dismiss const)\n    // Changes the state of \"searchfiled\" to the value we write\n    //.........................................................//\n    this.onSearchChange = event => {\n      this.setState(() => {\n        return {\n          searchfield: event.target.value\n        };\n      }, () => {\n        console.log(event.target.value);\n      });\n    };\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    };\n    // Intialize your state\n    console.log(\"1\", \"constructor()\");\n  }\n\n  // Whenever we have a component (class component specifically)\n  // that needs to leverage some API call to grab data from the internet\n  // in order to display the correct UI\n  // WE USE THE (componentDidMount()) LIFECYCLE METHOD!!!\n  // Mounting means the first time a component is rendered on the page\n  // the moment its placed on the DOM\n  componentDidMount() {\n    // API calls that update your state\n    // THEN RE-RENDER UI!!!\n    console.log(\"3\", \"componentDidMount()\");\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => {\n      // return parsed JSON promise\n      return response.json();\n    }).then(users => {\n      this.setState(() => {\n        return {\n          robots: users\n        };\n      }, () => {\n        console.log(this.state.robots);\n      });\n    });\n  }\n  // (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n  // This happens inside the render() function before return()\n  // Put that variable (filteredRobots) insid render() so we can access it\n  // The result (state change; robots change) is passed as a prop\n  //.........................................................//\n  render() {\n    // Render your initial component UI\n    console.log(\"2\", \"render()\");\n    const {\n      robots,\n      searchfield\n    } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return !robots.length ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"f1\",\n        children: \"RoboFriends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: this.onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        children: /*#__PURE__*/_jsxDEV(ErrorBoundry, {\n          children: /*#__PURE__*/_jsxDEV(CardList, {\n            robots: filteredRobots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","useState","useEffect","CardList","SearchBox","Scroll","ErrorBoundry","jsxDEV","_jsxDEV","App","constructor","onSearchChange","event","setState","searchfield","target","value","console","log","state","robots","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","robot","name","toLowerCase","includes","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","searchChange"],"sources":["/Users/nmufti/Desktop/REACT/RoboFriends/my-app/src/containers/App.js"],"sourcesContent":["// IMPORT ALL THE CHILDREN\nimport React, { Component, useState, useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\n// We export variables like this:\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// We define props in the parent file\n// Example: Card props are defined in CardList\n// Pass in the component CardList which is made up of Card components\n// Card then destructures them in its function so we can use them!\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\n\n// App is a SMART component\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: \"\",\n\t\t};\n\t\t// Intialize your state\n\t\tconsole.log(\"1\", \"constructor()\");\n\t}\n\n\t// Whenever we have a component (class component specifically)\n\t// that needs to leverage some API call to grab data from the internet\n\t// in order to display the correct UI\n\t// WE USE THE (componentDidMount()) LIFECYCLE METHOD!!!\n\t// Mounting means the first time a component is rendered on the page\n\t// the moment its placed on the DOM\n\tcomponentDidMount() {\n\t\t// API calls that update your state\n\t\t// THEN RE-RENDER UI!!!\n\t\tconsole.log(\"3\", \"componentDidMount()\");\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then((response) => {\n\t\t\t\t// return parsed JSON promise\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((users) => {\n\t\t\t\tthis.setState(\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn { robots: users };\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconsole.log(this.state.robots);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n\n\t// (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n\t//.........................................................//\n\t// Anytime you make your own method for a component ALWAYS DO:\n\t// Use (this syntax) + (arrow functions) + (dismiss const)\n\t// Changes the state of \"searchfiled\" to the value we write\n\t//.........................................................//\n\tonSearchChange = (event) => {\n\t\tthis.setState(\n\t\t\t() => {\n\t\t\t\treturn { searchfield: event.target.value };\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tconsole.log(event.target.value);\n\t\t\t}\n\t\t);\n\t};\n\n\t// (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n\t// This happens inside the render() function before return()\n\t// Put that variable (filteredRobots) insid render() so we can access it\n\t// The result (state change; robots change) is passed as a prop\n\t//.........................................................//\n\n\trender() {\n\t\t// Render your initial component UI\n\t\tconsole.log(\"2\", \"render()\");\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t});\n\n\t\treturn !robots.length ? (\n\t\t\t<h1>Loading</h1>\n\t\t) : (\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}