{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/reactt/my-app/src/App.js\";\n// IMPORT ALL THE CHILDREN\nimport React, { Component } from \"react\";\nimport CardList from \"./CardList\";\n// We export variables like this:\nimport { robots } from \"./robots\";\nimport SearchBox from \"./SearchBox\";\n\n// We define props in the (App.js) file\n// Pass in the component CardList which is made up of Card components\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    // Anytime you make your own method for a component ALWAYS DO:\n    // use (this syntax) + (arrow functions) + (dismiss const)\n    this.onSearchChange = event => {\n      const filteredRobots = this.state.robots.filter(robot => {\n        return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n      });\n      console.log(event.target.value);\n    };\n    this.state = {\n      robots: robots,\n      searchfield: \"\"\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"RoboFriends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: this.onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        robots: this.state.robots\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","CardList","robots","SearchBox","jsxDEV","_jsxDEV","App","constructor","onSearchChange","event","filteredRobots","state","filter","robot","name","toLowerCase","includes","searchfield","console","log","target","value","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","searchChange"],"sources":["/Users/nmufti/Desktop/reactt/my-app/src/App.js"],"sourcesContent":["// IMPORT ALL THE CHILDREN\nimport React, { Component } from \"react\";\nimport CardList from \"./CardList\";\n// We export variables like this:\nimport { robots } from \"./robots\";\nimport SearchBox from \"./SearchBox\";\n\n// We define props in the (App.js) file\n// Pass in the component CardList which is made up of Card components\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield: \"\",\n\t\t};\n\t}\n\n\t// Anytime you make your own method for a component ALWAYS DO:\n\t// use (this syntax) + (arrow functions) + (dismiss const)\n\n\tonSearchChange = (event) => {\n\t\tconst filteredRobots = this.state.robots.filter((robot) => {\n\t\t\treturn robot.name\n\t\t\t\t.toLowerCase()\n\t\t\t\t.includes(this.state.searchfield.toLowerCase());\n\t\t});\n\t\tconsole.log(event.target.value);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"tc\">\n\t\t\t\t<h1>RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t<CardList robots={this.state.robots} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,YAAY;AACjC;AACA,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,SAASN,SAAS,CAAC;EAC3BO,WAAWA,CAAA,EAAG;IACb,KAAK,CAAC,CAAC;IAOR;IACA;IAAA,KAEAC,cAAc,GAAIC,KAAK,IAAK;MAC3B,MAAMC,cAAc,GAAG,IAAI,CAACC,KAAK,CAACT,MAAM,CAACU,MAAM,CAAEC,KAAK,IAAK;QAC1D,OAAOA,KAAK,CAACC,IAAI,CACfC,WAAW,CAAC,CAAC,CACbC,QAAQ,CAAC,IAAI,CAACL,KAAK,CAACM,WAAW,CAACF,WAAW,CAAC,CAAC,CAAC;MACjD,CAAC,CAAC;MACFG,OAAO,CAACC,GAAG,CAACV,KAAK,CAACW,MAAM,CAACC,KAAK,CAAC;IAChC,CAAC;IAhBA,IAAI,CAACV,KAAK,GAAG;MACZT,MAAM,EAAEA,MAAM;MACde,WAAW,EAAE;IACd,CAAC;EACF;EAcAK,MAAMA,CAAA,EAAG;IACR,oBACCjB,OAAA;MAAKkB,SAAS,EAAC,IAAI;MAAAC,QAAA,gBAClBnB,OAAA;QAAAmB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBvB,OAAA,CAACF,SAAS;QAAC0B,YAAY,EAAE,IAAI,CAACrB;MAAe;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChDvB,OAAA,CAACJ,QAAQ;QAACC,MAAM,EAAE,IAAI,CAACS,KAAK,CAACT;MAAO;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAER;AACD;AAEA,eAAetB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}