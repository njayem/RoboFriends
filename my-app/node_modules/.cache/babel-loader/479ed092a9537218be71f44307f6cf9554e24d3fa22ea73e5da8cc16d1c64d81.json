{"ast":null,"code":"import _classCallCheck from\"/Users/nmufti/Desktop/RoboFriends/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/nmufti/Desktop/RoboFriends/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/nmufti/Desktop/RoboFriends/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/nmufti/Desktop/RoboFriends/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";// IMPORT ALL THE CHILDREN\nimport React,{Component}from\"react\";import CardList from\"../components/CardList\";// We export variables like this:\nimport SearchBox from\"../components/SearchBox\";import Scroll from\"../components/Scroll\";import'./App.css';import ErrorBoundry from\"../components/ErrorBoundry\";// We define props in the parent file\n// Example: Card props are defined in CardList\n// Pass in the component CardList which is made up of Card components\n// Card then destructures them in its function so we can use them!\n// CardList accepts a robots prop which refers to the robots array\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\n// App is a SMART component\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);// (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n//.........................................................//\n// Anytime you make your own method for a component ALWAYS DO:\n// Use (this syntax) + (arrow functions) + (dismiss const)\n// Changes the state of \"searchfiled\" to the value we write\n//.........................................................//\n_this.onSearchChange=function(event){_this.setState({searchfield:event.target.value});console.log(event.target.value);};_this.state={robots:[],searchfield:\"\"};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(response){// return parsed JSON promise\nreturn response.json();}).then(function(users){_this2.setState({robots:users});});}},{key:\"render\",value:// (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n// This happens inside the render() function before return()\n// Put that variable (filteredRobots) insid render() so we can access it\n// The result (state change; robots change) is passed as a prop\n//.........................................................//\nfunction render(){var _this$state=this.state,robots=_this$state.robots,searchfield=_this$state.searchfield;var filteredRobots=robots.filter(function(robot){return robot.name.toLowerCase().includes(searchfield.toLowerCase());});return!robots.length?/*#__PURE__*/_jsx(\"h1\",{children:\"Loading\"}):/*#__PURE__*/_jsxs(\"div\",{className:\"tc\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"f1\",children:\"RoboFriends\"}),/*#__PURE__*/_jsx(SearchBox,{searchChange:this.onSearchChange}),/*#__PURE__*/_jsx(Scroll,{children:/*#__PURE__*/_jsx(ErrorBoundry,{children:/*#__PURE__*/_jsx(CardList,{robots:filteredRobots})})})]});}}]);return App;}(Component);export default App;","map":{"version":3,"names":["React","Component","CardList","SearchBox","Scroll","ErrorBoundry","jsx","_jsx","jsxs","_jsxs","App","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","onSearchChange","event","setState","searchfield","target","value","console","log","state","robots","_createClass","key","componentDidMount","_this2","fetch","then","response","json","users","render","_this$state","filteredRobots","filter","robot","name","toLowerCase","includes","length","children","className","searchChange"],"sources":["/Users/nmufti/Desktop/RoboFriends/my-app/src/containers/App.js"],"sourcesContent":["// IMPORT ALL THE CHILDREN\nimport React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\n// We export variables like this:\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport './App.css';\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// We define props in the parent file\n// Example: Card props are defined in CardList\n// Pass in the component CardList which is made up of Card components\n// Card then destructures them in its function so we can use them!\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\n\n// App is a SMART component\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: \"\",\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then((response) => {\n\t\t\t\t// return parsed JSON promise\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((users) => {\n\t\t\t\tthis.setState({ robots: users });\n\t\t\t});\n\t}\n\n\t// (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n\t//.........................................................//\n\t// Anytime you make your own method for a component ALWAYS DO:\n\t// Use (this syntax) + (arrow functions) + (dismiss const)\n\t// Changes the state of \"searchfiled\" to the value we write\n\t//.........................................................//\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t\tconsole.log(event.target.value);\n\t};\n\n\t// (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n\t// This happens inside the render() function before return()\n\t// Put that variable (filteredRobots) insid render() so we can access it\n\t// The result (state change; robots change) is passed as a prop\n\t//.........................................................//\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter((robot) => {\n\t\t\treturn robot.name\n\t\t\t\t.toLowerCase()\n\t\t\t\t.includes(searchfield.toLowerCase());\n\t\t});\n\n\t\treturn !robots.length? \n\t\t\t<h1>Loading</h1>:\n\t\t\t (\n\t\t\t\t<div className=\"tc\">\n\t\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}