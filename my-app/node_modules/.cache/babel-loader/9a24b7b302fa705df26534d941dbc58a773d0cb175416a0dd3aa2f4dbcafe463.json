{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/REACT/RoboFriends/my-app/src/containers/App.js\",\n  _s = $RefreshSig$();\n// IMPORT ALL THE CHILDREN\nimport React, { useState, useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\n// We export variables like this:\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// We define props in the parent file\n// Example: Card props are defined in CardList\n// Pass in the component CardList which is made up of Card components\n// Card then destructures them in its function so we can use them!\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\n\n// App is a SMART component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // constructor() {\n  // \tsuper();\n  // \tthis.state = {\n  // \t\trobots: [],\n  // \t\tsearchfield: \"\",\n  // \t};\n\n  // REACT HOOKS //\n\n  // We use array destructuring to get the values we want\n  // the useState() hook returns an array with 2 values\n  // The first value is the current state\n  // The second value is a function that allows us to change the state\n  // and we give it an initial state\n\n  const [robots, setRobots] = useState([]);\n  const [searchfield, setSearchfield] = useState(\"\");\n\n  // Intialize your state\n  console.log(\"1\", \"constructor()\");\n\n  // Whenever we have a component (class component specifically)\n  // that needs to leverage some API call to grab data from the internet\n  // in order to display the correct UI\n  // WE USE THE (componentDidMount()) LIFECYCLE METHOD!!!\n  // Mounting means the first time a component is rendered on the page\n  // the moment its placed on the DOM\n  // componentDidMount() {\n  // API calls that update your state\n  // THEN RE-RENDER UI!!!\n  // \tconsole.log(\"3\", \"componentDidMount()\");\n  // \tfetch(\"https://jsonplaceholder.typicode.com/users\")\n  // \t\t.then((response) => {\n  // \t\t\t return parsed JSON promise\n  // \t\t\treturn response.json();\n  // \t\t})\n  // \t\t.then((users) => {\n  // \t\t\tthis.setState(\n  // \t\t\t\t() => {\n  // \t\t\t\t\treturn { robots: users };\n  // \t\t\t\t},\n  // \t\t\t\t() => {\n  // \t\t\t\t\tconsole.log(this.state.robots);\n  // \t\t\t\t}\n  // \t\t\t);\n  // \t\t});\n  // }\n\n  // (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n  //.........................................................//\n  // Anytime you make your own method for a component ALWAYS DO:\n  // Use (this syntax) + (arrow functions) + (dismiss const)\n  // Changes the state of \"searchfiled\" to the value we write\n  //.........................................................//\n\n  const onSearchChange = event => {\n    setSearchfield(event.target.value);\n  };\n\n  // (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n  // This happens inside the render() function before return()\n  // Put that variable (filteredRobots) insid render() so we can access it\n  // The result (state change; robots change) is passed as a prop\n  //.........................................................//\n\n  // Render your initial component UI\n  console.log(\"2\", \"render()\");\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n  });\n  return !robots.length ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 3\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tc\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"f1\",\n      children: \"RoboFriends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      searchChange: this.onSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n      children: /*#__PURE__*/_jsxDEV(ErrorBoundry, {\n        children: /*#__PURE__*/_jsxDEV(CardList, {\n          robots: filteredRobots\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"W9gy7CWTiqiao1gj6kY+nn6T9kg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","CardList","SearchBox","Scroll","ErrorBoundry","jsxDEV","_jsxDEV","App","_s","robots","setRobots","searchfield","setSearchfield","console","log","onSearchChange","event","target","value","filteredRobots","filter","robot","name","toLowerCase","includes","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","searchChange","_c","$RefreshReg$"],"sources":["/Users/nmufti/Desktop/REACT/RoboFriends/my-app/src/containers/App.js"],"sourcesContent":["// IMPORT ALL THE CHILDREN\nimport React, { useState, useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\n// We export variables like this:\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// We define props in the parent file\n// Example: Card props are defined in CardList\n// Pass in the component CardList which is made up of Card components\n// Card then destructures them in its function so we can use them!\n// CardList accepts a robots prop which refers to the robots array\n\n//return can only return ONE thing so nest everything inside one main\n// div tag!\n\n//how can sibling (pure) components communicate?\n// we use states!\n// a STATE (is an object that describe an application) (changes)\n// a PROPS (things that come out of state)\n// STATE (parent) >> props (child)\n\n// CONVERT APP into a class for STATE to work\n// ADD a constructor\n// STATES live in the parent component (APP)\n// The STATE (this.state.robots) is passed down as a prop to CardList\n// APP owns state, so it owns robots, it's allowed to change it!\n// STATES reside in the CONSTRUCTOR of the APP class component\n\n// App is a SMART component\nfunction App() {\n\t// constructor() {\n\t// \tsuper();\n\t// \tthis.state = {\n\t// \t\trobots: [],\n\t// \t\tsearchfield: \"\",\n\t// \t};\n\n\t// REACT HOOKS //\n\n\t// We use array destructuring to get the values we want\n\t// the useState() hook returns an array with 2 values\n\t// The first value is the current state\n\t// The second value is a function that allows us to change the state\n\t// and we give it an initial state\n\n\tconst [robots, setRobots] = useState([]);\n\tconst [searchfield, setSearchfield] = useState(\"\");\n\n\t// Intialize your state\n\tconsole.log(\"1\", \"constructor()\");\n\n\t// Whenever we have a component (class component specifically)\n\t// that needs to leverage some API call to grab data from the internet\n\t// in order to display the correct UI\n\t// WE USE THE (componentDidMount()) LIFECYCLE METHOD!!!\n\t// Mounting means the first time a component is rendered on the page\n\t// the moment its placed on the DOM\n\t// componentDidMount() {\n\t// API calls that update your state\n\t// THEN RE-RENDER UI!!!\n\t// \tconsole.log(\"3\", \"componentDidMount()\");\n\t// \tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t// \t\t.then((response) => {\n\t// \t\t\t return parsed JSON promise\n\t// \t\t\treturn response.json();\n\t// \t\t})\n\t// \t\t.then((users) => {\n\t// \t\t\tthis.setState(\n\t// \t\t\t\t() => {\n\t// \t\t\t\t\treturn { robots: users };\n\t// \t\t\t\t},\n\t// \t\t\t\t() => {\n\t// \t\t\t\t\tconsole.log(this.state.robots);\n\t// \t\t\t\t}\n\t// \t\t\t);\n\t// \t\t});\n\t// }\n\n\t// (SEARCHBOX) COMPONENT COMMUNICATES WITH (APP) COMPONENT //\n\t//.........................................................//\n\t// Anytime you make your own method for a component ALWAYS DO:\n\t// Use (this syntax) + (arrow functions) + (dismiss const)\n\t// Changes the state of \"searchfiled\" to the value we write\n\t//.........................................................//\n\n\tconst onSearchChange = (event) => {\n\t\tsetSearchfield(event.target.value);\n\t};\n\n\t// (APP) COMPONENT COMMUNICATES WITH (CARDLIST) COMPONENT //\n\t// This happens inside the render() function before return()\n\t// Put that variable (filteredRobots) insid render() so we can access it\n\t// The result (state change; robots change) is passed as a prop\n\t//.........................................................//\n\n\t// Render your initial component UI\n\tconsole.log(\"2\", \"render()\");\n\n\tconst filteredRobots = robots.filter((robot) => {\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t});\n\n\treturn !robots.length ? (\n\t\t<h1>Loading</h1>\n\t) : (\n\t\t<div className=\"tc\">\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</ErrorBoundry>\n\t\t\t</Scroll>\n\t\t</div>\n\t);\n}\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C;AACA,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,4BAA4B;;AAErD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAc,OAAO,CAACC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC;;EAEjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,cAAc,GAAIC,KAAK,IAAK;IACjCJ,cAAc,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA;EACAL,OAAO,CAACC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC;EAE5B,MAAMK,cAAc,GAAGV,MAAM,CAACW,MAAM,CAAEC,KAAK,IAAK;IAC/C,OAAOA,KAAK,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACb,WAAW,CAACY,WAAW,CAAC,CAAC,CAAC;EACpE,CAAC,CAAC;EAEF,OAAO,CAACd,MAAM,CAACgB,MAAM,gBACpBnB,OAAA;IAAAoB,QAAA,EAAI;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,gBAEhBxB,OAAA;IAAKyB,SAAS,EAAC,IAAI;IAAAL,QAAA,gBAClBpB,OAAA;MAAIyB,SAAS,EAAC,IAAI;MAAAL,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCxB,OAAA,CAACJ,SAAS;MAAC8B,YAAY,EAAE,IAAI,CAACjB;IAAe;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChDxB,OAAA,CAACH,MAAM;MAAAuB,QAAA,eACNpB,OAAA,CAACF,YAAY;QAAAsB,QAAA,eACZpB,OAAA,CAACL,QAAQ;UAACQ,MAAM,EAAEU;QAAe;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CACL;AACF;AAACtB,EAAA,CAtFQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AAuFZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}